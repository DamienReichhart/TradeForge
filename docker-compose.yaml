version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    ports:
      - "11101:11101"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.3
    environment:
      - POSTGRES_SERVER=postgres
    env_file:
      - ./backend/.env

  # Frontend application
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.4
    environment:
      - REACT_APP_API_URL=http://api.tradeforge.apextradelogic.com:11101/api/v1
    extra_hosts:
      - "api.tradeforge.apextradelogic.com:10.10.0.3"

  cloudflared-frontend:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run --token token
    environment:
      - TUNNEL_TOKEN=token
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.5
    
  cloudflared-backend:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run --token token
    environment:
      - TUNNEL_TOKEN=token
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.6



networks:
  tradeforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/24

volumes:
  postgres_data: 