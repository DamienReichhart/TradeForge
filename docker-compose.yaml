version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.3
    environment:
      - POSTGRES_SERVER=postgres
    env_file:
      - ./backend/.env

  # Frontend application
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.4

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.5

  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=eyJhIjoiNWVmMDRlNzNiODkxMjZlZWQyN2JkMDZmZDFhMTg3NTIiLCJ0IjoiY2I3M2I5OTAtZDBjNy00ZDU0LWI1NjQtZDljMmM0YjRlZTM4IiwicyI6IlpHSTFPVGc1Tm1JdFl6SXdOeTAwWVdZeUxXRm1aVGt0TkRWak1HVTBPRGMzWkRRMSJ9
    networks:
      tradeforge-network:
        ipv4_address: 10.10.0.100


networks:
  tradeforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/24

volumes:
  postgres_data: 